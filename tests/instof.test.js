const test = require('ava')
const instof = require('../')

test('reserved types (true)', t => {
  t.true(instof(undefined, 'Undefined'))
  t.true(instof(null, 'Null'))
  t.true(instof(global, 'Global'))
  t.true(instof(global, 'Object'))
  t.true(instof(globalThis, 'Global'))
  t.true(instof(globalThis, Object))
  t.true(instof(NaN, 'NotNumber'))
  t.true(instof(NaN, 'Number'))
  t.true(instof(NaN, Number))
  t.true(instof(NaN, 'Object'))
  t.true(instof(1/0, 'InfiniteNumber'))
  t.true(instof(-Infinity, 'InfiniteNumber'))
  t.true(instof(Infinity, 'Number'))
  t.true(instof(Infinity, Number))
  t.true(instof(Object.create(null), 'Dictionary'))
})

test('reserved types (false)', t => {
  t.false(instof(undefined, 'Object'))
  t.false(instof(null, 'Object'))
  t.false(instof(null, Object))
  t.false(instof(global, 'Undefined'))
  t.false(instof(NaN, 'String'))
  t.false(instof(Infinity, 'Null'))
  t.false(instof(Object.create(null), 'Object'))
  t.false(instof(Object.create(null), Object))
})

test('primitive types (true)', t => {
  t.true(instof(false, 'Boolean'))
  t.true(instof(false, Boolean))
  t.true(instof(true, 'Object'))
  t.true(instof(new Boolean(true), Boolean))
  t.true(instof(new Boolean(true), 'Object'))
  t.true(instof(42, 'Number'))
  t.true(instof(42, Number))
  t.true(instof(42, 'Object'))
  t.true(instof(new Number(42), 'Number'))
  t.true(instof(new Number(42), Object))
  t.true(instof(BigInt(Number.MAX_SAFE_INTEGER), 'BigInt'))
  t.true(instof(BigInt(Number.MAX_SAFE_INTEGER), BigInt))
  t.true(instof(BigInt(Number.MAX_SAFE_INTEGER), 'Object'))
  t.true(instof('str', 'String'))
  t.true(instof('str', String))
  t.true(instof('str', 'Object'))
  t.true(instof('str', Object))
  t.true(instof(new String('str'), 'String'))
  t.true(instof(new String('str'), String))
  t.true(instof(Symbol('str'), 'Symbol'))
  t.true(instof(Symbol('str'), Symbol))
  t.true(instof(Symbol('str'), 'Object'))
})

test('primitive types (false)', t => {
  t.false(instof(false, 'Number'))
  t.false(instof(42, 'Boolean'))
  t.false(instof(BigInt(Number.MAX_SAFE_INTEGER), 'Number'))
  t.false(instof('str', 'Symbol'))
  t.false(instof(Symbol('str'), 'String'))
})

test('function types (true)', t => {
  t.true(instof(function () {}, 'Function'))
  t.true(instof(function () {}, Function))
  t.true(instof(function () {}, 'Object'))
  t.true(instof(() => {}, 'Function'))
  t.true(instof(() => {}, Object))
  t.true(instof(async function () {}, 'AsyncFunction'))
  t.true(instof(async function () {}, 'Function'))
  t.true(instof(async function () {}, 'Object'))
  t.true(instof(function * () {}, 'GeneratorFunction'))
  t.true(instof(function * () {}, 'Function'))
  t.true(instof(function * () {}, Function))
  t.true(instof(function * () {}, Object))
})

test('function types (false)', t => {
  t.false(instof(function () {}, 'function'))
  t.false(instof(() => {}, 'ArrowFunction'))
  t.false(instof(async function () {}, 'Async'))
  t.false(instof(function * () {}, 'Generator'))
})

test('object types (true)', t => {
  t.true(instof({}, 'Object'))
  t.true(instof({}, Object))
  t.true(instof(new Object(), 'Object'))
  t.true(instof([], 'Array'))
  t.true(instof([], Array))
  t.true(instof([], Object))
  t.true(instof(new Array(), 'Array'))
  t.true(instof(new Date(), 'Date'))
  t.true(instof(new Date(), Date))
  t.true(instof(new Date(), Object))
  t.true(instof(/a-z/, 'RegExp'))
  t.true(instof(/a-z/, RegExp))
  t.true(instof(/a-z/, Object))
  t.true(instof(new RegExp('foo'), 'RegExp'))
  t.true(instof(new Error('error'), 'Error'))
  t.true(instof(new Error('error'), Error))
  t.true(instof(new Error('error'), Object))
  t.true(instof(new ReferenceError(''), 'ReferenceError'))
  t.true(instof(new ReferenceError(''), ReferenceError))
  t.true(instof(new ReferenceError(''), Error))
  t.true(instof(Promise.resolve(), 'Promise'))
  t.true(instof(Promise.resolve(), Promise))
  t.true(instof(new Map(), 'Map'))
  t.true(instof(new Int8Array(), 'Int8Array'))
  t.true(instof(new BigInt64Array(), BigInt64Array))
  t.true(instof(new BigInt64Array(), 'BigInt64Array'))
  t.true(instof(new BigInt64Array(), 'TypedArray'))
  t.true(instof(new BigInt64Array(), Object))
  t.true(instof(new ArrayBuffer(), 'ArrayBuffer'))
  t.true(instof(new ArrayBuffer(), ArrayBuffer))
  t.true(instof(new ArrayBuffer(), Object))
})

test('object types (false)', t => {
  t.false(instof({}, 'Dictionary'))
  t.false(instof(new Object(), 'Null'))
  t.false(instof([], 'TypedArray'))
  t.false(instof(new Array(), ArrayBuffer))
  t.false(instof(new Date(), Number))
  t.false(instof(/a-z/, String))
  t.false(instof(new RegExp('foo'), 'Global'))
  t.false(instof(new Error('error'), ReferenceError))
  t.false(instof(new ReferenceError(''), Promise))
  t.false(instof(Promise.resolve(1), Number))
  t.false(instof(new Map(), Set))
  t.false(instof(new Int8Array(), Array))
  t.false(instof(new BigInt64Array(), Array))
  t.false(instof(new ArrayBuffer(), 'Array'))
})

test('custom types (true)', t => {
  class MyClass {}
  class MyUserClass extends MyClass {}
  t.true(instof(new MyClass(), 'MyClass'))
  t.true(instof(new MyClass(), 'Object'))
  t.true(instof(new MyClass(), Object))
  t.true(instof(MyClass, Function))
  t.true(instof(MyClass, Object))
  t.true(instof(new MyUserClass(), 'MyUserClass'))
  t.true(instof(new MyUserClass(), MyClass))
  t.true(instof(new MyUserClass(), 'Object'))
})

test('custom types (false)', t => {
  class MyClass {}
  class MyUserClass extends MyClass {}
  t.false(instof(new MyClass(), 'Class'))
  t.false(instof(new MyClass(), MyUserClass))
  t.false(instof(new MyUserClass(), 'Function'))
})
